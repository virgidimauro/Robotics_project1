---------------------------------------TEAM-------------------------------------

    • 10629060 Virginia Di Mauro
    • 10667036 Lucia Giusti
    • 10656379 Ignazio Maria Castrignano


------------------------PROJECT STRUCTURE AND COMPONENTS------------------------

First Robotics Project A.Y. 2021/2022
The project consists of a single package, named Robotics_project1.
Inside the Robotics_project1 folder, besides the CMakeLists.txt and package.xml files, there are the cfg, launch, msg, src, srv and rviz folders:


---Robotics_project1
	--- cfg 
		--- integration_methods.cfg
		--- parameters_calibration.cfg
	--- launch
		--- project1.launch
	--- msg
		--- w_rpm.msg
	--- rviz
		--- Robotics_project1.rviz
	--- src
		--- odom.cpp
		--- vel.cpp
		--- inversevel.cpp
		--- CMakeLists.txt
	--- srv
		--- Reset_odom.srv

	--- CMakeLists.txt
	--- package.xml


The src folder contains the source code for three nodes: 
odom, vel, inversevel.

The node vel listens to the /wheel_states topic published by the bags (sensor_msgs/JoinState messages) and estimates the linear and the angular velocity of the robot, referred to the base_link reference system. Then it publishes them in the topic /cmd_vel as TwistStamped messages.
First, in order to calculate the velocities of the wheels, the node uses the difference between the encoder ticks at the previous instant and the one at the following instant, divided by the difference between the previous instant and the following one, by the gear ratio and by the encoder resolution, then multiplying by 2π. So we get the resulting wheels velocities in rad/s.
Furthermore, we use these results to compute linear and the angular velocity of the robot by means of the kinematics equations of the omnidirectional robot.
Lastly, in this node we implement a callback of the dynamic reconfigure server to set the parameters of the robot, calibrating them. These parameters are described in cfg folder in parameters_calibration.cfg.

The odom node estimates the pose of the robot from the TwistStamped messages published in /cmd_vel, and publishes the odometry message on /odom (nav_msgs/Odometry messages).
The odometry is calculated using either Euler or Runge-Kutta integration method, depending on the parameter int_choice which can be set with dynamic reconfigure (0 for Euler and 1 for Rugge-Kutta integration method, the default method is Euler). int_choice parameter is described in cfg folder in integration_methods.cfg.
This node also publishes the dynamic transformation between the odom and the base_link reference systems, using a tf2_ros::TransformBroadcaster.
It offers a service Reset_odom which forces to reset the pose to a given pose (x,y,theta) and whose request and response structures are defined in the Reset_odom.srv files in the srv folder.



AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
The ResetOdometryToZero service resets the robot position to (0,0) in the odom reference system, keeping unchanged the orientation theta. Its request and response are empty, as the service is not parametric and has not values to be returned.
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA



The inversevel node reads the velocities: v_x, v_y and omega subscribing to /cmd vel. It uses them to estimate the velocities of the wheels and then publishes in a custom message on topic /wheels_rpm.
This node employs a callbacks of the dynamic reconfigure server to set the parameters of the robot, in order to calibrate them.
It computes the velocities of the wheels by inverting the formulas previously used in vel node and multiplying by the conversion factor 60/2π to get them in RPM (revolution per minute).



In the launch folder it is provided a launch file, named project1.launch (see below for details).

----------------------------------PARAMETERS------------------------------------

launch file:     - initial_pose_x        // value = 0.0
		 - initial_pose_y        // value = 0.0
		 - initial_pose_theta    // value = 0.0

dynamic reconfigure: - integration_methods // {Euler, Runge_Kutta}
		     - parameters_calibration // {l, w, r, T, N}

The initial pose of the robot is set via three ROS parameters in the launch file: initial_pose_x, initial_pose_y and initial_pose_theta.



AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
They are referred to the odom reference system, and so they are all set to 0.0. 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA




Another parameter defines the integration method used in the odometry estimate (Euler or Runge-Kutta); this parameter can be set by dynamic reconfigure at runtime, so it is described in the integration_methods.cfg file.
The int_choice is described by an enumeration with two values: Euler and RK, that corresponds to the integer values 0 and 1. The default is Euler.
The parameters which describe the robot are defined in parameters_calibration.cfg and can be set by dynamic reconfigure at runtime.


------------------------------------TF TREE-------------------------------------



AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
rosrun tf view_frames
evince frames.pdf
world ----- > odom ---- > base_link

The root of the tree is the world reference system, which the /gt_pose data are referred to.
The world reference system has a child, the odom reference system, a fixed frame whose origin is the initial position of the robot and whose orientation of the x-axis corresponds to the initial orientation of the robot (that is equivalent to say that the initial pose of the robot in the odom reference system is (0,0,0)).
As both the world and the odom reference systems are fixed, the transformation between them is static, and it is provided by a static_transform_publisher which is launched by the launch file.
The base_link reference system is the mobile reference system placed in the center of the robot, whose x-axis is oriented in the forward direction of the robot’s movement.
The (dynamic) transformation between odom and base_link is published by the pub_odometry node through a tf::TransformBroadcaster.
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA






--------------------------------CUSTOM MESSAGE----------------------------------

The node inversevel publishes the wheels speed in rpm are defined in the w_rpm.msg file as follows:

Header      header
float64     rpm_fl
float64     rpm_fr
float64     rpm_rr
float64     rpm_rl

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
odom: contains the estimated odometry (pose and velocities) of the robot
nav_msgs::Odometry odom
geometry_msgs::TwistStamped cmd_vel
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

---------------------------HOW TO START/USE THE NODES---------------------------

The launch file provided starts all the nodes, vel, odom, inversevel, a static_transform_publisher that publishes the static transformation between world and odom and sets the static parameters initial_pose_x, initial_pose_y and initial_pose_theta.
So, in order to test the project with the bag1.bag data, it is only necessary to type in two different terminals (in the ROS workspace) the following commands: 

roslaunch Robotics_project1 project1.launch

rosbag play -–clock “PATH_TO_THE_BAG/bag1.bag”

It is possible to do the same with the other bags as well.

It is possible to change the integration method with dynamic reconfigure typing in a terminal: 

rosrun dynamic_reconfigure dynparam set /odom int_choice value

where value can be Euler or Runge_Kutta. Another way is through the rqt graphic tool:

rosrun rqt_reconfigure rqt_reconfigure

It is possible to change the parameters of the robot l, w, r, T, N with dynamic reconfigure typing in a terminal:

rosrun rqt_reconfigure rqt_reconfigure

It is possible to call the Reset_odom service typing in a terminal the command:

rosservice call /Reset_odom x y theta



AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Analogously, ResetOdometryToZero can be called through:

rosservice call /ResetOdometryToZero
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA



where x, y and theta are the inputs of the service.




Both the services can be called by a service client node as well. AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA


